akka.reliable-delivery{
    producer-controller {
     
        # To avoid head of line blocking from serialization and transfer
        # of large messages this can be enabled.
        # Large messages are chunked into pieces of the given size in bytes. The
        # chunked messages are sent separately and assembled on the consumer side.
        # Serialization and deserialization is performed by the ProducerController and
        # ConsumerController respectively instead of in the remote transport layer.
        chunk-large-messages = off
    
        durable-queue {
          # The ProducerController uses this timeout for the requests to
          # the durable queue. If there is no reply within the timeout it
          # will be retried.
          request-timeout = 3s
    
          # The ProducerController retries requests to the durable queue this
          # number of times before failing.
          retry-attempts = 10
    
          # The ProducerController retries sending the first message with this interval
          # until it has been confirmed.
          resend-first-interval = 1s
        }
    }
    
    consumer-controller {
        # Number of messages in flight between ProducerController and
        # ConsumerController. The ConsumerController requests for more messages
        # when half of the window has been used.
        flow-control-window = 50
    
        # The ConsumerController resends flow control messages to the
        # ProducerController with the resend-interval-min, and increasing
        # it gradually to resend-interval-max when idle.
        resend-interval-min = 2s
        resend-interval-max = 30s
    
        # If this is enabled lost messages will not be resent, but flow control is used.
        # This can be more efficient since messages don't have to be
        # kept in memory in the `ProducerController` until they have been
        # confirmed, but the drawback is that lost messages will not be delivered.
        only-flow-control = false
    }
    
      work-pulling {
        producer-controller = ${akka.reliable-delivery.producer-controller}
        producer-controller {
          # Limit of how many messages that can be buffered when there
          # is no demand from the consumer side.
          buffer-size = 1000
    
          # Ask timeout for sending message to worker until receiving Ack from worker
          internal-ask-timeout = 60s
    
          # Chunked messages not implemented for work-pulling yet. Override to not
          # propagate property from akka.reliable-delivery.producer-controller.
          chunk-large-messages = off
        }
    }
    
     sharding {
        producer-controller = ${akka.reliable-delivery.producer-controller}
        producer-controller {
          # Limit of how many messages that can be buffered when there
          # is no demand from the consumer side.
          buffer-size = 1000
    
          # Ask timeout for sending message to worker until receiving Ack from worker
          internal-ask-timeout = 60s
    
          # If no messages are sent to an entity within this duration the
          # ProducerController for that entity will be removed.
          cleanup-unused-after = 120s
    
          # In case ShardingConsumerController is stopped and there are pending
          # unconfirmed messages the ShardingConsumerController has to "wake up"
          # the consumer again by resending the first unconfirmed message.
          resend-first-unconfirmed-idle-timeout = 10s
    
          # Chunked messages not implemented for sharding yet. Override to not
          # propagate property from akka.reliable-delivery.producer-controller.
          chunk-large-messages = off
        }
    
        consumer-controller = ${akka.reliable-delivery.consumer-controller}
        consumer-controller {
          # Limit of how many messages that can be buffered before the
          # ShardingConsumerController is initialized by the Start message.
          buffer-size = 1000
          
            # Number of messages in flight between ProducerController and
              # ConsumerController. The ConsumerController requests for more messages
              # when half of the window has been used.
              flow-control-window = 50
          
              # The ConsumerController resends flow control messages to the
              # ProducerController with the resend-interval-min, and increasing
              # it gradually to resend-interval-max when idle.
              resend-interval-min = 2s
              resend-interval-max = 30s
          
              # If this is enabled lost messages will not be resent, but flow control is used.
              # This can be more efficient since messages don't have to be
              # kept in memory in the `ProducerController` until they have been
              # confirmed, but the drawback is that lost messages will not be delivered.
              only-flow-control = false
        }
      }
}